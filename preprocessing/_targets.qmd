---
title: "Preprocessing pipeline"
theme: simplex
embed-resources: true
standalone: true
format:
  html:
    code-link: true
---

<p style="font-size: small">

Source: [preprocessing/\_targets.qmd](https://github.com/drejom/haemdata/blob/main/preprocessing/_targets.qmd)

</p>

# Setup

::: panel-tabset
## In brief

Haemdata is an R package in two-parts: a targets pipeline that preprocesses raw sequencing reads and functions to access processed data.

::: {.callout-note appearance="simple"}
The [{`targets`}](https://books.ropensci.org/targets/) package streamlines data workflows and promotes reproducibility. It skips redundant tasks and abstracts files as R objects to ensure efficient, painless, and trustworthy results.
:::

## Load libraries & options

Set options and load libraries required to run the pipeline.

```{r setup}
library(targets)
library(tarchetypes)
tar_unscript()

knitr::opts_chunk$set(
    collapse = TRUE,
    warning = FALSE,
    message = FALSE,
    comment = "#>"
)
```

## Pipeline globals

Define global options, functions & variables common to all targets.

### Global options

```{targets global-options, tar_globals = TRUE}
options(tidyverse.quiet = TRUE)

tar_option_set(
    packages = c("tidyverse", "SummarizedExperiment", "haemdata", "tarchetypes"),
    error = "abridge", # continue with running targets on error
    storage = "worker",
    retrieval = "worker"
)

# Load the R scripts & functions:
for (file in list.files(here::here("preprocessing/scripts"), full.names = TRUE)) source(file)
```

### nf-core pipeline versions

```{targets pipeline-variables, tar_globals = TRUE}
rnaseq_release <- "3.7"
smrnaseq_release <- "2.1.0"
scrnaseq_release <- "2.1.0"
```

### Publish pins to onedrive or devel?

Set to "onedrive" to publish to OneDrive via the haemdata Teams channel, or to "devel" to publish to Isilon (`MHO/haemdata`)

```{targets publish-destination, tar_globals = TRUE}
publish_location <- "devel"
                  # "onedrive"
```

### Cohort aliases

Regex patterns to select cohorts using dplyr::filter() or similar functions.

```{targets cohort-selectors, tar_globals = TRUE}
all_mice <- "^AML.mRNA.2016$|^AML.mRNA.2018.all_samples$|^AML.mRNA.2020$|
        |^AML.mRNA.2021.RxGroup1$|^AML.mRNA.2021.RxGroup2$|^AML.mRNA.2021.RxGroup2_pt2$|
        |^AML.mRNA.2022.RxGroup3$|^CML.mRNA.2021$|^CML.mRNA.2022$|^CML.mRNA.2022_pt2$"

aml_mice <- "^AML.mRNA.2016$|^AML.mRNA.2018.all_samples$|^AML.mRNA.2020$|
        |^AML.mRNA.2021.RxGroup1$|^AML.mRNA.2021.RxGroup2$|^AML.mRNA.2021.RxGroup2_pt2$|
        |^AML.mRNA.2022.RxGroup3$"

chemo_mice <- "^AML.mRNA.2020$"

treatment_mice <- "^AML.mRNA.2021.RxGroup1$|^AML.mRNA.2021.RxGroup2$|
        |^AML.mRNA.2021.RxGroup2_pt2$|^AML.mRNA.2022.RxGroup3$"

cml_mice <- "^CML.mRNA.2021$|^CML.mRNA.2022$|^CML.mRNA.2022_pt2$"

published_metadata_mmu <- readRDS(here::here("data-raw/metadata_mmu.rds"))
```
:::

# Metadata

::: panel-tabset
## In brief

Haemdata includes comprehensive metadata about samples, such as collection date, assay, sequencing libraries, sex, age, treatment information, and a range of other biological and technical metrics.

The code to collate it has been through multiple iterations, is complex and ugly and undoubtedly some mistakes will have made it through. Errors or omissions can be reported on [GitHub](https://github.com/drejom/haemdata/issues).

## Mouse metadata

For **mmu**, the sample metadata is largely complete. These data were collated from multiple sequencing run sheets, directly from sequencing folders, emails, and so forth.

The current implementation of `update_metadata_mmu()` does the following:
- fixes `dod` for some CML mice
- adds metadata for "blast crisis" experiment


```{targets metadata_mmu_prepub}
tar_target(metadata_mmu_prepub, update_metadata_mmu())
```

## Human metadata

For **hsa** metadata, `make_metadata_hsa()` row binds all available metadata in to an ugly and largely incomplete table.

The current implementation simply consolidates metadata across sample sheets.

```{targets metadata_hsa}
tar_target(
    metadata_hsa,
    make_metadata_hsa(
        dplyr::full_join(sample_sheet_2022_3, sample_sheet_2022_2) |>
        dplyr::full_join(sample_sheet_2022_4))
    )
```
:::

# Assays

::: panel-tabset
## In brief

The workflows for all assays begin with raw sequencing reads, either fastq files or h5ad files for 10X Cellplex libraries.

Raw data are stored on COH's Isilon storage by the Integrative Genomics Core, organized across multiple investigator's `Seq` folders. Since v0.0.0.9008 (2022-11-14), file paths are stored in the metadata table.

Functions in this section format sample sheets for nf-core pipelines, submit pipelines to the Apollo cluster, look for completed runs and extract processed results. For 10X data, functions read in Cellranger output to Seurat objects, apply cell QC filters, perform integration, clustering, UMAP dimension reduction, & annotation of cell cycles and cell types.

## mRNA

### Sample sheets

To assess library quality control metrics and produce unified expression matrices, we use the nf-core/rnaseq pipeline. The following targets prepare sample sheets as described in the [pipeline documentation](https://nf-co.re/rnaseq/usage#samplesheet-input).

Samples can be combined in a single sample sheet before a major release or nf-core pipeline update. In the interim, cohorts can be processed in separate nf-core/rnaseq runs and combined. In the current release, we have:

-   All mice from 2016 \~ mid 2022, (except *sequencing validation mice*, see below)
-   2022 CML mice (`CML.mRNA.2022_pt2`)
-   2023 CML miR142-KO mice

```{targets sample_sheet_2016_2022}
list(
    tar_target(sample_sheet_2016_2022, make_rnaseq_sample_sheet(all_mice)),
    tar_target(sample_sheet_CML_3, make_rnaseq_sample_sheet("^CML.mRNA.2022_pt2$")),
    tar_target(sample_sheet_mrna_mir142ko, make_rnaseq_sample_sheet("^CML.mRNA.mir142ko$"))
)        
```

Spaces are not permitted in filenames, so for this cohort, we need to cache and symlink fastqs:

```{targets link_fastqs_mRNA_mir142, eval=TRUE}
tar_target(sample_sheet_mir142ko_mrna_cache, symlink_mrna_fastqs("mmu_mrna_mir142ko/fastq", sample_sheet_mrna_mir142ko))
```

Two datasets have not been integrated into sample metadata tables:

-   "Validation mice" from a sequencing validation run and can be considered technical replicates.
-   Human AML samples have metadata that's inconsistent between experiments. Until we decide on the minimum metadata to collect for human samples, these datasets will remain separate.

The following targets locate the fastq files on Isilon and make sample sheets for the nf-core/rnaseq pipeline.

```{targets mrna_validation_mmu_and_hsa_aml}
list(
# AML validation samples
    tar_target(sample_sheet_2017_1, parse_metadata_AML.validation.2017()),
    tar_target(sample_sheet_2020_2, parse_metadata_AML.mRNA.novaseq_validation.2020()),
    tar_target(
        sample_sheet_techrep,
        rbind(
            sample_sheet_2017_1,
            sample_sheet_2020_2
        )
    ),
# AML & MDS patients (COH Biobank); MDS from EGAD00001003891; AML patients from PRJEB27973
    tar_target(sample_sheet_2022_2, parse_metadata_AML.mRNA.HSA_FLT3.2022()),
    tar_target(sample_sheet_2022_3, parse_metadata_MDS.rnaseq.EGAD00001003891()),
    tar_target(sample_sheet_2022_4, parse_metadata_AML.PRJEB27973())
)
```

### Run nf-core/rnaseq

Target names and their outputs adhere to the format *species_protocol_cohort_ref-genome_workflow*

|                  |                                                |
|------------------|------------------------------------------------|
| ***cohort***     | 2016_2022, validation, flt3, mds, 2022_1       |
| ***species***    | mmu, hsa                                       |
| ***protocol***   | mrna, scrna, mirna                             |
| ***ref-genome*** | GENCODEr40, GENCODEm28_HLT, GRCm38_HLT, GRCh38 |
| ***workflow***   | qc, salmon, seurat                             |

Construct the `run_folder` parameter for `run_nf_core_rnaseq()` using the tokens *species_protocol_cohort*.

::: callout-tip
## Code suggestion

This would be a good spot to implement `tar_map()`.
:::

```{targets mrna_sample_sheets}
list(
    tar_target(mmu_mrna_2016_2022_qc,
        run_nf_core_rnaseq("mmu_mrna_2016_2022", sample_sheet_2016_2022, "GENCODEm28_HLT"),
        format = "file"
    ),
    tar_target(mmu_mrna_techrep_qc,
        run_nf_core_rnaseq("mmu_mrna_techrep", sample_sheet_techrep, "GENCODEm28_HLT"),
        format = "file"
    ),
    tar_target(mmu_mrna_cml3_qc,
        run_nf_core_rnaseq("mmu_mrna_cml3_qc", sample_sheet_CML_3, "GENCODEm28_HLT"),
        format = "file"
    ),
    tar_target(mmu_mrna_mir142ko_qc,
        run_nf_core_rnaseq("mmu_mrna_mir142ko", sample_sheet_mir142ko_mrna_cache, "GENCODEm28_HLT"),
        format = "file"
    ),
    tar_target(hsa_mrna_flt3_qc,
        run_nf_core_rnaseq("hsa_mrna_flt3", sample_sheet_2022_2, "GENCODEr40"),
        format = "file"
    ),
    tar_target(hsa_mrna_mds_qc,
        run_nf_core_rnaseq("hsa_mrna_mds", sample_sheet_2022_3, "GENCODEr40"),
        format = "file"
    ),
    tar_target(hsa_mrna_kim_qc,
        run_nf_core_rnaseq("hsa_mrna_kim", sample_sheet_2022_4, "GENCODEr40"),
        format = "file"
    )
)
```

### Make SummarisedExperiments

From each nf-core/rnaseq pipeline run, annotate the `salmon/salmon.merged.gene_counts.rds` SummarizedExperiment with sample metadata and QC metrics

#### Mouse datasets

```{targets mrna_mmu_summarised_experiments}
list(
    tar_target(mmu_mrna_2016_2022_qc_se,
        annotate_se(
            get_rnaseq_se(mmu_mrna_2016_2022_qc),
            metadata_mmu_prepub,
            mmu_mrna_2016_2022_qc
    )),
    tar_target(
        mmu_mrna_techrep_qc_se,
        annotate_se(
            get_rnaseq_se(mmu_mrna_techrep_qc),
            metadata_mmu_prepub,
            mmu_mrna_techrep_qc
    )),
    tar_target(
        mmu_mrna_cml3_qc_se,
        annotate_se(
            get_rnaseq_se(mmu_mrna_cml3_qc),
            metadata_mmu_prepub,
            mmu_mrna_cml3_qc
    )),
    tar_target(
        mmu_mrna_mir142ko_qc_se,
        annotate_se(
            get_rnaseq_se(mmu_mrna_mir142ko_qc),
            metadata_mmu_prepub,
            mmu_mrna_mir142ko_qc
    ))
)
```

#### Human datasets

```{targets mrna_hsa_summarised_experiments}
list(
    tar_target(hsa_mrna_flt3_qc_se, annotate_se(get_rnaseq_se(hsa_mrna_flt3_qc), metadata_hsa, hsa_mrna_flt3_qc)),
    tar_target(hsa_mrna_mds_qc_se, annotate_se(get_rnaseq_se(hsa_mrna_mds_qc), metadata_hsa, hsa_mrna_mds_qc)),
    tar_target(hsa_mrna_kim_qc_se, annotate_se(get_rnaseq_se(hsa_mrna_kim_qc), metadata_hsa, hsa_mrna_kim_qc))
)
```

### Merge SummarisedExperiments

Merge the late-coming CML samples with all other mice into a single SummarisedExperiment.

```{targets mrna_merge_summarised_experiments}
list(
    tar_target(
    mmu_mrna_2016_2022_cml3_mice_qc_se, 
    merge_mrna_se(
        mmu_mrna_2016_2022_qc_se,
        mmu_mrna_cml3_qc_se,
        new_name = "mmu_mrna_all_mice_GENCODEm28_HLT_qc")
),
tar_target(
    mmu_mrna_all_mice_qc_se, 
    merge_mrna_se(
        mmu_mrna_2016_2022_cml3_mice_qc_se,
        mmu_mrna_mir142ko_qc_se,
        new_name = "mmu_mrna_all_mice_GENCODEm28_HLT_qc")
)
)
```

### Quality control

Flag mouse samples that fail the STAR uniquely mapped reads threshold of 5%; any other changes to the metadata table can be made here, prior to publishing the final version.

```{targets mrna_flag_lowly_mapped_mmu_se}
tar_target(
    metadata_mmu,
    flag_lowly_mapped_mmu_se(mmu_mrna_all_mice_qc_se, metadata_mmu_prepub))
```

Remove human samples that fail the STAR uniquely mapped reads threshold of 5%

```{targets mrna_qc_filter_se}
list(
    tar_target(hsa_mrna_flt3_qc_se_flt, qc_filter_se(hsa_mrna_flt3_qc_se)),
    tar_target(hsa_mrna_mds_qc_se_flt, qc_filter_se(hsa_mrna_mds_qc_se)),
    tar_target(hsa_mrna_kim_qc_se_flt, qc_filter_se(hsa_mrna_kim_qc_se))
)
```

## miRNA

### Sample sheets

The Integrative Genomics Core has implemented a custom "home brew" miRNAseq protocol that uses a modified Illumina adapter and requires additional clipping, accomplished with `cutadapt`, eg:

```{sh eval=FALSE}
cutadapt -a TCTGGAATTCTCGGGTGCCAAGGAACTCC -m 16 -u 3 -o OUT.cutadapt.fq.gz IN.fq.gz
```

Some libraries were delivered by the Core with the adapter already removed and 3bp clipped from the 3' end prior to processing.

Somewhere along the line, the original, unedited fastqs were lost from the Isilon storage and now only the trimmed fastqs are available, so two independent runs are required.

#### Pre-trimmed

```{targets mirna-sample-sheets_pretrimmed}
tar_target(miRNA_sample_sheet_pretrimmed, pretrimmed_sample_sheet())
```

#### Untrimmed

```{targets mirna-sample-sheets_untrimmed}
tar_target(
    miRNA_sample_sheet_untrimmed, untrimmed_sample_sheet())
```

For untrimmed libraries, we use a function that loads the Apollo `cutadapt` module and spawns a job for each fastq file on the cluster. The trimmed files are cached in {nf_core_cache} and a sample sheet for the nf-core/smrnaseq pipeline is returned using the cached, trimmed and compressed fastqs.

```{targets run_cutadapt_smrna}
tar_target(miRNA_sample_sheet_trimmed, run_cutadapt_smrna(miRNA_sample_sheet_untrimmed))
```

### nf-core/smRNAseq pipeline

The nf-core/smrnaseq pipeline includes several tools that provide a comprehensive analysis of microRNAseq data including [mirTrace](https://github.com/friedlanderlab/mirtrace) for QC and contamination, [mirTop]() for count matrices of miRNA and isomiRs, and [miRDeep2](https://www.mdc-berlin.de/content/mirdeep2-documentation) for quantification and discovery of novel miRNAs.

```{targets nf-core-smrnaseq, eval=TRUE}
list(
    tar_target(mmu_mirna_pretrimmed_multiqc,
        run_nfcore_smrnaseq("mmu_mirna_pretrimmed", miRNA_sample_sheet_pretrimmed),
        format = "file"
        ),
    tar_target(mmu_mirna_trimmed_multiqc,
        run_nfcore_smrnaseq("mmu_mirna_untrimmed", miRNA_sample_sheet_trimmed),
        format = "file"
    )
)
```

::: callout-tip
## Code suggestion

In a future release, all samples could be run together after preprocessing.
:::

### Bowtie counts

Extract [mature miRNA normalised CPM](https://nf-co.re/smrnaseq/2.1.0/output#edger) and merge the matrices across runs.

```{targets nf-core-smrnaseq-cpm, eval=TRUE}
list(
    tar_target(mmu_mirna_pretrimmed_cpm, nfcore_smrna_cpm(mmu_mirna_pretrimmed_multiqc)),
    tar_target(mmu_mirna_trimmed_cpm, nfcore_smrna_cpm(mmu_mirna_trimmed_multiqc)),
    tar_target(mmu_mirna_all_mice_miRBase22_bowtie_cpm, merge(mmu_mirna_pretrimmed_cpm, mmu_mirna_trimmed_cpm, by = 'row.names', all = TRUE))
)
```

### mirTop counts

[mirtop](https://nf-co.re/smrnaseq/2.1.0/output#mirtop) parses bowtie BAMs producing a mirgff3 file with information about miRNAs and isomiRs.

The nfcore/smrnaseq pipeline includes a [script](https://github.com/nf-core/smrnaseq/blob/master/bin/collapse_mirtop.r) to collapse mirtop output to a matrix, which is extracted and combined across runs:

```{targets nf-core-smrnaseq-mirtop-counts, eval=TRUE}
list(
    tar_target(mmu_mirna_pretrimmed_mirtop_counts, nfcore_mirtop_counts(mmu_mirna_pretrimmed_multiqc)),
    tar_target(mmu_mirna_trimmed_mirtop_counts, nfcore_mirtop_counts(mmu_mirna_trimmed_multiqc)),
    tar_target(mmu_mirna_all_mice_miRBase22_mirtop_counts, 
        dplyr::left_join(
            mmu_mirna_pretrimmed_mirtop_counts, mmu_mirna_trimmed_mirtop_counts, by = "miRNA"))
)
```

### mirTop isomiRs

-   mirTop for isomiRs: [Desvignes et al 2020](https://academic.oup.com/bioinformatics/article/36/3/698/5556118)
-   Nice isomiR review: [Tomasello et al 2021](https://www.frontiersin.org/articles/10.3389/fcell.2021.668648/full)

```{targets nf-core-smrnaseq-mirtop-isomir, eval=TRUE}
list(
    tar_target(mmu_mirna_pretrimmed_mirtop_isomir, nfcore_mirtop_isomir(mmu_mirna_pretrimmed_multiqc)),
    tar_target(mmu_mirna_trimmed_mirtop_isomir, nfcore_mirtop_isomir(mmu_mirna_trimmed_multiqc)),
    tar_target(mmu_mirna_mirtop_isomir,
        left_join(
            mmu_mirna_pretrimmed_mirtop_isomir,
            mmu_mirna_trimmed_mirtop_isomir,
                by = c("seq", "mir", "mism", "add", "t5", "t3")) |>
        mutate(across(starts_with("COHP"), ~ replace_na(., 0)))
        ),
    tar_target(mmu_mirna_isomir, make_isomir(mmu_mirna_mirtop_isomir, metadata_mmu),
        resources = apollo_medium
    )
)
```

::: callout-important
This fails to combine the runs; not published for now.
:::

### mirTrace & samtools metrics

Extract mirTrace and samtools QC metrics

```{targets nf-core-smrnaseq-qc-metrics, eval=TRUE}
list(
    tar_target(mmu_mirna_pretrimmed_qc, nfcore_smrna_qc(mmu_mirna_pretrimmed_multiqc)),
    tar_target(mmu_mirna_trimmed_qc, nfcore_smrna_qc(mmu_mirna_trimmed_multiqc)),
    tar_target(mmu_mirna_all_mice_miRBase22_mirna_qc, rbind(mmu_mirna_pretrimmed_qc, mmu_mirna_trimmed_qc))
)
```

## 10X

::: callout-tip
## Code suggestion

As currently written, the 10X workflow chains together some resource-intensive functions that could be implemented more efficiently. For instance, we could store only the new cell metadata that results from each function/step, rather than passing a new Seurat object from one step to the next.
:::

### Load data

::: panel-tabset
#### Multiplexed samples

The *2022 AML scRNAseq cohort* was sequenced using the 10X [CellPlex](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/cellplex) cell multiplexing protocol.

The [`seurat_import_cellplex()`](http://cgt.coh.org/haemdata/reference/seurat_import_cellplex.html) function builds Seurat objects and adds cell metadata columns indicating the percent expression of mitochondrial, ribosomal, haemoglobin, platelet, *Xist* & chrY genes, and the transgene *MYH11*.

```{targets seurat_import_objects_2022, eval=TRUE}
tar_target(
    mmu_10x_aml2022_GENCODEm28_HLT,
    seurat_import_cellplex("^AML.scRNAseq.2022$"),
    resources = apollo_medium
    )
```

#### Single sample libraries

10X libraries are typically prepared for a single sample and sequenced, as for the *CML miR-142 KO* cohort from the Zhang/Marcucci lab (LMPP & T-cell scRNAseq) and the 2023 *blast crisis* cohort. The Cellranger protocol is essentially the same for Cellplex libraries, without the demultiplexing steps. 

Begin by preparing a sample sheet for the nf-core/smrnaseq pipeline:

```{targets 10X_SS_sample_sheets, eval=TRUE}
list(
tar_target(sample_sheet_mir142ko_10x, make_scrnaseq_sample_sheet("^CML.10x.mir142ko$")),
tar_target(sample_sheet_blastcrisis_10x, parse_10x_blastcrisis())
)
```

An nf-core/scrnaseq pipeline allows running Cellranger with single-sample libraries, but does not support Cellplex libraries at this stage. Cellranger requires fastq names meet a specified format, and the nf-core pipeline does not permit spaces in file paths, so we first link fastq files to the {nf_core_cache}:

```{targets link_fastqs_10x, eval=TRUE}
list(
tar_target(sample_sheet_mir142ko_10x_cache, symlink_10x_fastqs("mmu_10X_mir142_ko/fastq", sample_sheet_mir142ko_10x)),
tar_target(sample_sheet_blastcrisis_10x_cache, symlink_10x_fastqs("mmu_10X_blastcrisis/fastq", sample_sheet_blastcrisis_10x))
)
```

Run the pipeline:

```{targets run_nfcore_scrnaseq, eval=TRUE}
list(
    tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT_multiqc,
    run_nfcore_scrnaseq("mmu_10X_mir142_ko", sample_sheet_mir142ko_10x_cache)
    ),
tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT_multiqc,
    run_nfcore_scrnaseq("mmu_10X_blastcrisis", sample_sheet_blastcrisis_10x_cache)
    )
)
```

The [`seurat_import_cellranger()`](http://cgt.coh.org/haemdata/reference/seurat_import_cellranger.html) function builds Seurat objects and adds cell metadata columns indicating the percent expression of mitochondrial, ribosomal, haemoglobin, platelet, *Xist* & chrY genes, and the transgene *MYH11*.

```{targets seurat_import_objects_cellranger, eval=TRUE}
list(
    tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT,
    seurat_import_cellranger(mmu_10x_mir142ko_GENCODEm28_HLT_multiqc),
    resources = apollo_medium
    ),
    tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT,
    seurat_import_cellranger(mmu_10x_blastcrisis_GENCODEm28_HLT_multiqc),
    resources = apollo_medium
    )
)
```
:::

### QC filter

See [`haemdata::seurat_perform_cell_qc()`](http://cgt.coh.org/haemdata/reference/seurat_perform_cell_qc.html)

Consider including:

-   [EmptyDrops](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1662-y)
-   [SoupX](https://github.com/constantAmateur/SoupX)
-   Others on [GitHub](https://github.com/drejom/haemdata/issues/7)

```{targets seurat_perform_cell_qc, eval=TRUE}
list(
    tar_target(
    mmu_10x_aml2022_GENCODEm28_HLT_qc, 
    seurat_perform_cell_qc(mmu_10x_aml2022_GENCODEm28_HLT),
    resources = apollo_bigmem
    ),
    tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT_qc, 
    seurat_perform_cell_qc(mmu_10x_mir142ko_GENCODEm28_HLT),
    resources = apollo_bigmem
    ),
    tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT_qc, 
    seurat_perform_cell_qc(mmu_10x_blastcrisis_GENCODEm28_HLT),
    resources = apollo_bigmem
    )
    )
```

### Integrate samples with SCTransform

See [`haemdata::seurat_sctransform()`](http://cgt.coh.org/haemdata/reference/seurat_sctransform.html)

```{targets seurat_sctransform, eval=TRUE}
list(
    tar_target(
        mmu_10x_aml2022_GENCODEm28_HLT_sct,
        seurat_sctransform(mmu_10x_aml2022_GENCODEm28_HLT_qc),
        resources = apollo_bigmem
    ),
    tar_target(
        mmu_10x_mir142ko_GENCODEm28_HLT_sct,
        seurat_sctransform(mmu_10x_mir142ko_GENCODEm28_HLT_qc),
        resources = apollo_bigmem
    ),
    tar_target(
        mmu_10x_blastcrisis_GENCODEm28_HLT_sct,
        seurat_sctransform(mmu_10x_blastcrisis_GENCODEm28_HLT_qc),
        resources = apollo_bigmem
    )
    )
```

### Annotate clusters & UMAP

See [`haemdata::seurat_annotate_clusters_and_umap()`](http://cgt.coh.org/haemdata/reference/seurat_annotate_umap_and_clusters.html)

```{targets seurat_annotate_clusters_and_umap, eval=TRUE}
list(
tar_target(
    mmu_10x_aml2022_GENCODEm28_HLT_sct_clust,
    seurat_annotate_clusters_and_umap(mmu_10x_aml2022_GENCODEm28_HLT_sct),
    resources = apollo_large),
tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT_sct_clust,
    seurat_annotate_clusters_and_umap(mmu_10x_mir142ko_GENCODEm28_HLT_sct),
    resources = apollo_large),
tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT_sct_clust,
    seurat_annotate_clusters_and_umap(mmu_10x_blastcrisis_GENCODEm28_HLT_sct),
    resources = apollo_bigmem)
    )
```

### Annotate cell cycle

See [`haemdata::seurat_annotate_cell_cycle()`](http://cgt.coh.org/haemdata/reference/seurat_annotate_cell_cycle.html)

```{targets seurat_annotate_cell_cycle, eval=TRUE}
list(
    tar_target(
    mmu_10x_aml2022_GENCODEm28_HLT_sct_clust_cc,
    seurat_annotate_cell_cycle(mmu_10x_aml2022_GENCODEm28_HLT_sct_clust),
    resources = apollo_large
    ),
tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT_sct_clust_cc,
    seurat_annotate_cell_cycle(mmu_10x_mir142ko_GENCODEm28_HLT_sct_clust),
    resources = apollo_large
    ),
tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT_sct_clust_cc,
    seurat_annotate_cell_cycle(mmu_10x_blastcrisis_GENCODEm28_HLT_sct_clust),
    resources = apollo_large
    )
)
```

### Annotate cell type

See [`haemdata::seurat_annotate_cell_type()`](http://cgt.coh.org/haemdata/reference/seurat_annotate_cell_cycle.html)

```{targets seurat_annotate_cell_type, eval=TRUE}
list(
tar_target(
    mmu_10x_aml2022_GENCODEm28_HLT_sct_clust_cc_ct,
    seurat_annotate_cell_type(mmu_10x_aml2022_GENCODEm28_HLT_sct_clust_cc),
    resources = apollo_large
    ),
tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT_sct_clust_cc_ct,
    seurat_annotate_cell_type(mmu_10x_mir142ko_GENCODEm28_HLT_sct_clust_cc),
    resources = apollo_large
    ),
tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT_sct_clust_cc_ct,
    seurat_annotate_cell_type(mmu_10x_blastcrisis_GENCODEm28_HLT_sct_clust_cc),
    resources = apollo_bigmem
    )
)
```
:::

# Publish pins

#TODO What are pins?

::: panel-tabset
## Metadata pins

```{targets publish_metadata_pins, eval=TRUE}
list(
    tar_target(
        metadata_mmu_pins,
        publish_metadata(metadata_mmu),
        deployment = "main"
    ),
    tar_target(
        metadata_hsa_pins,
        publish_metadata(metadata_hsa),
        deployment = "main"
    )
)
```

## mRNA pins

```{targets publish_mrna_pins, eval=TRUE}
list(
    tar_target(
        mmu_mrna_all_mice_GENCODEm28_pins, publish_se(mmu_mrna_all_mice_qc_se),
        deployment = "main"
    ),
    tar_target(
        mmu_mrna_techrep_GENCODEm28_pins, publish_se(mmu_mrna_techrep_qc_se),
        deployment = "main"
    ),
    tar_target(
        hsa_mrna_flt3_GENCODEm28_pins, publish_se(hsa_mrna_flt3_qc_se_flt),
        deployment = "main"
    ),
    tar_target(
        hsa_mrna_mds_GENCODEm28_pins, publish_se(hsa_mrna_mds_qc_se_flt),
        deployment = "main"
    ),
    tar_target(
        hsa_mrna_kim_GENCODEm28_pins, publish_se(hsa_mrna_kim_qc_se_flt),
        deployment = "main"
    )
)
```

## miRNA pins

```{targets publish_mirna_pins, eval=TRUE}
list( 
    tar_target(
        mmu_mirna_all_mice_miRBase22_mirtop_counts_pins,
        publish_mirtop_counts(mmu_mirna_all_mice_miRBase22_mirtop_counts),
        deployment = "main"
    ),
    tar_target(
        mmu_mirna_all_mice_miRBase22_bowtie_cpm_pins,
        publish_bowtie_cpm(mmu_mirna_all_mice_miRBase22_bowtie_cpm),
        deployment = "main"
    ),
    tar_target(
        mmu_mirna_all_mice_miRBase22_mirna_qc_pins,
        publish_mirna_qc(mmu_mirna_all_mice_miRBase22_mirna_qc),
        deployment = "main"
    )
)
```

## 10X pins

```{targets publish_seurat, eval=TRUE}
list(
tar_target(
    mmu_10x_aml2022_GENCODEm28_HLT_pins,
    publish_seurat(mmu_10x_aml2022_GENCODEm28_HLT_sct_clust_cc_ct),
        resources = apollo_small
    ),
tar_target(
    mmu_10x_mir142ko_GENCODEm28_HLT_pins,
    publish_seurat(mmu_10x_mir142ko_GENCODEm28_HLT_sct_clust_cc_ct),
        resources = apollo_small
    ),
tar_target(
    mmu_10x_blastcrisis_GENCODEm28_HLT_pins,
    publish_seurat(mmu_10x_blastcrisis_GENCODEm28_HLT_sct_clust_cc_ct),
        resources = apollo_shortmem
    )
    ) 
```

## Collect latest pin versions

```{targets collect_pin_versions, eval=TRUE}
tar_target(
    latest_published_data, collect_pin_versions(
            mmu_10x_mir142ko_GENCODEm28_HLT_pins,
            mmu_10x_aml2022_GENCODEm28_HLT_pins,
            mmu_10x_blastcrisis_GENCODEm28_HLT_pins,
            # metadata
            metadata_mmu_pins,
            metadata_hsa_pins,
            # micro RNAseq
            mmu_mirna_all_mice_miRBase22_mirtop_counts_pins,
            mmu_mirna_all_mice_miRBase22_bowtie_cpm_pins,
            mmu_mirna_all_mice_miRBase22_mirna_qc_pins,
            # bulk RNAseq
            mmu_mrna_all_mice_GENCODEm28_pins,
            mmu_mrna_techrep_GENCODEm28_pins,
            hsa_mrna_flt3_GENCODEm28_pins,
            hsa_mrna_mds_GENCODEm28_pins,
            hsa_mrna_kim_GENCODEm28_pins
    ),
    deployment = "main",
    format = "file"
)
```
:::

# Build package

#TODO what happens here

```{targets build_package, eval=TRUE}
tar_target(
    built_package,
    build_package(latest_published_data),
    resources = apollo_shortmem)
```

# Targets pipeline

Having defined the pipeline targets above, R scripts are run using `tar_make_future()`. This distributes individual targets across the HPC Cluster in parallel, accounting for interdependencies.

```{r, eval = FALSE}
system(
    glue::glue(
        "srun -J run_haemdata --time 48:00 /opt/singularity/3.7.0/bin/singularity exec \\
        --env R_LIBS_SITE=/opt/singularity-images/rbioc/rlibs/bioc-3.16 \\
        -B /labs,/opt/singularity,/opt/singularity-images \\
        --pwd {getwd()} \\
        /opt/singularity-images/rbioc/vscode-rbioc_3.16.sif Rscript -e 'targets::tar_make_future\\(\\)'"
    )
)
```

The dependency graph illustrates the steps of the pipeline. It's interactive and you can zoom/pan to explore the `targets`.

```{r}
tar_visnetwork(targets_only = TRUE, label = c("time"))
```

At this point, you can go back and run `{targets}` chunks in interactive mode without interfering with the code or data of the non-interactive pipeline.
